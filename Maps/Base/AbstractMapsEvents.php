<?php
/**
 * Maps.
 *
 * @copyright Krator (TdM)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Krator <torredemarfil@heroesofmightandmagic.es>.
 * @link https://www.heroesofmightandmagic.es
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.1.0 (https://modulestudio.de).
 */

namespace TdM\MapsModule\Base;

/**
 * Events definition base class.
 */
abstract class AbstractMapsEvents
{
    /**
     * The tdmmapsmodule.map_post_load event is thrown when maps
     * are loaded from the database.
     *
     * The event listener receives an
     * TdM\MapsModule\Event\FilterMapEvent instance.
     *
     * @see TdM\MapsModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const MAP_POST_LOAD = 'tdmmapsmodule.map_post_load';
    
    /**
     * The tdmmapsmodule.map_pre_persist event is thrown before a new map
     * is created in the system.
     *
     * The event listener receives an
     * TdM\MapsModule\Event\FilterMapEvent instance.
     *
     * @see TdM\MapsModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const MAP_PRE_PERSIST = 'tdmmapsmodule.map_pre_persist';
    
    /**
     * The tdmmapsmodule.map_post_persist event is thrown after a new map
     * has been created in the system.
     *
     * The event listener receives an
     * TdM\MapsModule\Event\FilterMapEvent instance.
     *
     * @see TdM\MapsModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const MAP_POST_PERSIST = 'tdmmapsmodule.map_post_persist';
    
    /**
     * The tdmmapsmodule.map_pre_remove event is thrown before an existing map
     * is removed from the system.
     *
     * The event listener receives an
     * TdM\MapsModule\Event\FilterMapEvent instance.
     *
     * @see TdM\MapsModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const MAP_PRE_REMOVE = 'tdmmapsmodule.map_pre_remove';
    
    /**
     * The tdmmapsmodule.map_post_remove event is thrown after an existing map
     * has been removed from the system.
     *
     * The event listener receives an
     * TdM\MapsModule\Event\FilterMapEvent instance.
     *
     * @see TdM\MapsModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const MAP_POST_REMOVE = 'tdmmapsmodule.map_post_remove';
    
    /**
     * The tdmmapsmodule.map_pre_update event is thrown before an existing map
     * is updated in the system.
     *
     * The event listener receives an
     * TdM\MapsModule\Event\FilterMapEvent instance.
     *
     * @see TdM\MapsModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const MAP_PRE_UPDATE = 'tdmmapsmodule.map_pre_update';
    
    /**
     * The tdmmapsmodule.map_post_update event is thrown after an existing new map
     * has been updated in the system.
     *
     * The event listener receives an
     * TdM\MapsModule\Event\FilterMapEvent instance.
     *
     * @see TdM\MapsModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const MAP_POST_UPDATE = 'tdmmapsmodule.map_post_update';
    
}
