<?php
/**
 * Maps.
 *
 * @copyright Krator (TdM)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Krator <torredemarfil@heroesofmightandmagic.es>.
 * @link https://www.heroesofmightandmagic.es
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.1.0 (https://modulestudio.de).
 */

namespace TdM\MapsModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use TdM\MapsModule\Traits\StandardFieldsTrait;
use TdM\MapsModule\Validator\Constraints as MapsAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for map entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractMapEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'map';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=1000000000)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @MapsAssert\ListEntry(entityName="map", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $name
     */
    protected $name = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $author
     */
    protected $author = '';
    
    /**
     * Map file meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $mapFileMeta
     */
    protected $mapFileMeta = [];
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
     *    mimeTypes = {"application/zip", "application/x-rar"}
     * )
     * @var string $mapFile
     */
    protected $mapFile = null;
    
    /**
     * Full map file path as url.
     *
     * @Assert\Type(type="string")
     * @var string $mapFileUrl
     */
    protected $mapFileUrl = '';
    
    /**
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @MapsAssert\ListEntry(entityName="map", propertyName="testState", multiple=false)
     * @var string $testState
     */
    protected $testState = '';
    
    /**
     * @ORM\Column(length=10)
     * @Assert\NotBlank()
     * @MapsAssert\ListEntry(entityName="map", propertyName="game", multiple=false)
     * @var string $game
     */
    protected $game = '';
    
    /**
     * @ORM\Column(length=15)
     * @Assert\NotBlank()
     * @MapsAssert\ListEntry(entityName="map", propertyName="sizeMap", multiple=false)
     * @var string $sizeMap
     */
    protected $sizeMap = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $bUnderground
     */
    protected $bUnderground = false;
    
    /**
     * @ORM\Column(length=8)
     * @Assert\NotBlank()
     * @MapsAssert\ListEntry(entityName="map", propertyName="languageMap", multiple=false)
     * @var string $languageMap
     */
    protected $languageMap = '';
    
    /**
     * @ORM\Column(type="date")
     * @Assert\NotNull()
     * @Assert\Date()
     * @var date $createDat
     */
    protected $createDat;
    
    /**
     * @ORM\Column(length=5)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="5")
     * @var string $versionMap
     */
    protected $versionMap = '';
    
    /**
     * @ORM\Column(length=10)
     * @Assert\NotNull()
     * @MapsAssert\ListEntry(entityName="map", propertyName="difficulty", multiple=false)
     * @var string $difficulty
     */
    protected $difficulty = '';
    
    /**
     * @ORM\Column(type="smallint")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\Range(min=1, max=8)
     * @var integer $nHumans
     */
    protected $nHumans = 1;
    
    /**
     * @ORM\Column(type="smallint")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\Range(min=1, max=8)
     * @var integer $nPlayers
     */
    protected $nPlayers = 1;
    
    /**
     * @ORM\Column(length=34)
     * @Assert\NotNull()
     * @MapsAssert\ListEntry(entityName="map", propertyName="gameType", multiple=false)
     * @var string $gameType
     */
    protected $gameType = '';
    
    /**
     * @ORM\Column(length=235)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="235")
     * @var string $mapStyle
     */
    protected $mapStyle = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="2000")
     * @var text $description
     */
    protected $description = '';
    
    /**
     * Foreground meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $foregroundMeta
     */
    protected $foregroundMeta = [];
    
    /**
     * @ORM\Column(length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var string $foreground
     */
    protected $foreground = null;
    
    /**
     * Full foreground path as url.
     *
     * @Assert\Type(type="string")
     * @var string $foregroundUrl
     */
    protected $foregroundUrl = '';
    
    /**
     * Underground meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $undergroundMeta
     */
    protected $undergroundMeta = [];
    
    /**
     * @ORM\Column(length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var string $underground
     */
    protected $underground = null;
    
    /**
     * Full underground path as url.
     *
     * @Assert\Type(type="string")
     * @var string $undergroundUrl
     */
    protected $undergroundUrl = '';
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $scoreRev
     */
    protected $scoreRev = 0;
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $nScoreRev
     */
    protected $nScoreRev = 0;
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $nDownloads
     */
    protected $nDownloads = 0;
    
    
    
    /**
     * MapEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Sets the name.
     *
     * @param string $name
     *
     * @return void
     */
    public function setName($name)
    {
        if ($this->name !== $name) {
            $this->name = isset($name) ? $name : '';
        }
    }
    
    /**
     * Returns the author.
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->author;
    }
    
    /**
     * Sets the author.
     *
     * @param string $author
     *
     * @return void
     */
    public function setAuthor($author)
    {
        if ($this->author !== $author) {
            $this->author = isset($author) ? $author : '';
        }
    }
    
    /**
     * Returns the map file.
     *
     * @return string
     */
    public function getMapFile()
    {
        return $this->mapFile;
    }
    
    /**
     * Sets the map file.
     *
     * @param string $mapFile
     *
     * @return void
     */
    public function setMapFile($mapFile)
    {
        if ($this->mapFile !== $mapFile) {
            $this->mapFile = isset($mapFile) ? $mapFile : '';
        }
    }
    
    /**
     * Returns the map file url.
     *
     * @return string
     */
    public function getMapFileUrl()
    {
        return $this->mapFileUrl;
    }
    
    /**
     * Sets the map file url.
     *
     * @param string $mapFileUrl
     *
     * @return void
     */
    public function setMapFileUrl($mapFileUrl)
    {
        if ($this->mapFileUrl !== $mapFileUrl) {
            $this->mapFileUrl = isset($mapFileUrl) ? $mapFileUrl : '';
        }
    }
    
    /**
     * Returns the map file meta.
     *
     * @return array
     */
    public function getMapFileMeta()
    {
        return $this->mapFileMeta;
    }
    
    /**
     * Sets the map file meta.
     *
     * @param array $mapFileMeta
     *
     * @return void
     */
    public function setMapFileMeta($mapFileMeta = [])
    {
        if ($this->mapFileMeta !== $mapFileMeta) {
            $this->mapFileMeta = isset($mapFileMeta) ? $mapFileMeta : '';
        }
    }
    
    /**
     * Returns the test state.
     *
     * @return string
     */
    public function getTestState()
    {
        return $this->testState;
    }
    
    /**
     * Sets the test state.
     *
     * @param string $testState
     *
     * @return void
     */
    public function setTestState($testState)
    {
        if ($this->testState !== $testState) {
            $this->testState = isset($testState) ? $testState : '';
        }
    }
    
    /**
     * Returns the game.
     *
     * @return string
     */
    public function getGame()
    {
        return $this->game;
    }
    
    /**
     * Sets the game.
     *
     * @param string $game
     *
     * @return void
     */
    public function setGame($game)
    {
        if ($this->game !== $game) {
            $this->game = isset($game) ? $game : '';
        }
    }
    
    /**
     * Returns the size map.
     *
     * @return string
     */
    public function getSizeMap()
    {
        return $this->sizeMap;
    }
    
    /**
     * Sets the size map.
     *
     * @param string $sizeMap
     *
     * @return void
     */
    public function setSizeMap($sizeMap)
    {
        if ($this->sizeMap !== $sizeMap) {
            $this->sizeMap = isset($sizeMap) ? $sizeMap : '';
        }
    }
    
    /**
     * Returns the b underground.
     *
     * @return boolean
     */
    public function getBUnderground()
    {
        return $this->bUnderground;
    }
    
    /**
     * Sets the b underground.
     *
     * @param boolean $bUnderground
     *
     * @return void
     */
    public function setBUnderground($bUnderground)
    {
        if (boolval($this->bUnderground) !== boolval($bUnderground)) {
            $this->bUnderground = boolval($bUnderground);
        }
    }
    
    /**
     * Returns the language map.
     *
     * @return string
     */
    public function getLanguageMap()
    {
        return $this->languageMap;
    }
    
    /**
     * Sets the language map.
     *
     * @param string $languageMap
     *
     * @return void
     */
    public function setLanguageMap($languageMap)
    {
        if ($this->languageMap !== $languageMap) {
            $this->languageMap = isset($languageMap) ? $languageMap : '';
        }
    }
    
    /**
     * Returns the create dat.
     *
     * @return date
     */
    public function getCreateDat()
    {
        return $this->createDat;
    }
    
    /**
     * Sets the create dat.
     *
     * @param date $createDat
     *
     * @return void
     */
    public function setCreateDat($createDat)
    {
        if ($this->createDat !== $createDat) {
            if (is_object($createDat) && $createDat instanceOf \DateTime) {
                $this->createDat = $createDat;
            } else {
                $this->createDat = new \DateTime($createDat);
            }
        }
    }
    
    /**
     * Returns the version map.
     *
     * @return string
     */
    public function getVersionMap()
    {
        return $this->versionMap;
    }
    
    /**
     * Sets the version map.
     *
     * @param string $versionMap
     *
     * @return void
     */
    public function setVersionMap($versionMap)
    {
        if ($this->versionMap !== $versionMap) {
            $this->versionMap = isset($versionMap) ? $versionMap : '';
        }
    }
    
    /**
     * Returns the difficulty.
     *
     * @return string
     */
    public function getDifficulty()
    {
        return $this->difficulty;
    }
    
    /**
     * Sets the difficulty.
     *
     * @param string $difficulty
     *
     * @return void
     */
    public function setDifficulty($difficulty)
    {
        if ($this->difficulty !== $difficulty) {
            $this->difficulty = isset($difficulty) ? $difficulty : '';
        }
    }
    
    /**
     * Returns the n humans.
     *
     * @return integer
     */
    public function getNHumans()
    {
        return $this->nHumans;
    }
    
    /**
     * Sets the n humans.
     *
     * @param integer $nHumans
     *
     * @return void
     */
    public function setNHumans($nHumans)
    {
        if (intval($this->nHumans) !== intval($nHumans)) {
            $this->nHumans = intval($nHumans);
        }
    }
    
    /**
     * Returns the n players.
     *
     * @return integer
     */
    public function getNPlayers()
    {
        return $this->nPlayers;
    }
    
    /**
     * Sets the n players.
     *
     * @param integer $nPlayers
     *
     * @return void
     */
    public function setNPlayers($nPlayers)
    {
        if (intval($this->nPlayers) !== intval($nPlayers)) {
            $this->nPlayers = intval($nPlayers);
        }
    }
    
    /**
     * Returns the game type.
     *
     * @return string
     */
    public function getGameType()
    {
        return $this->gameType;
    }
    
    /**
     * Sets the game type.
     *
     * @param string $gameType
     *
     * @return void
     */
    public function setGameType($gameType)
    {
        if ($this->gameType !== $gameType) {
            $this->gameType = isset($gameType) ? $gameType : '';
        }
    }
    
    /**
     * Returns the map style.
     *
     * @return string
     */
    public function getMapStyle()
    {
        return $this->mapStyle;
    }
    
    /**
     * Sets the map style.
     *
     * @param string $mapStyle
     *
     * @return void
     */
    public function setMapStyle($mapStyle)
    {
        if ($this->mapStyle !== $mapStyle) {
            $this->mapStyle = isset($mapStyle) ? $mapStyle : '';
        }
    }
    
    /**
     * Returns the description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param text $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($this->description !== $description) {
            $this->description = isset($description) ? $description : '';
        }
    }
    
    /**
     * Returns the foreground.
     *
     * @return string
     */
    public function getForeground()
    {
        return $this->foreground;
    }
    
    /**
     * Sets the foreground.
     *
     * @param string $foreground
     *
     * @return void
     */
    public function setForeground($foreground)
    {
        if ($this->foreground !== $foreground) {
            $this->foreground = $foreground;
        }
    }
    
    /**
     * Returns the foreground url.
     *
     * @return string
     */
    public function getForegroundUrl()
    {
        return $this->foregroundUrl;
    }
    
    /**
     * Sets the foreground url.
     *
     * @param string $foregroundUrl
     *
     * @return void
     */
    public function setForegroundUrl($foregroundUrl)
    {
        if ($this->foregroundUrl !== $foregroundUrl) {
            $this->foregroundUrl = $foregroundUrl;
        }
    }
    
    /**
     * Returns the foreground meta.
     *
     * @return array
     */
    public function getForegroundMeta()
    {
        return $this->foregroundMeta;
    }
    
    /**
     * Sets the foreground meta.
     *
     * @param array $foregroundMeta
     *
     * @return void
     */
    public function setForegroundMeta($foregroundMeta = [])
    {
        if ($this->foregroundMeta !== $foregroundMeta) {
            $this->foregroundMeta = $foregroundMeta;
        }
    }
    
    /**
     * Returns the underground.
     *
     * @return string
     */
    public function getUnderground()
    {
        return $this->underground;
    }
    
    /**
     * Sets the underground.
     *
     * @param string $underground
     *
     * @return void
     */
    public function setUnderground($underground)
    {
        if ($this->underground !== $underground) {
            $this->underground = $underground;
        }
    }
    
    /**
     * Returns the underground url.
     *
     * @return string
     */
    public function getUndergroundUrl()
    {
        return $this->undergroundUrl;
    }
    
    /**
     * Sets the underground url.
     *
     * @param string $undergroundUrl
     *
     * @return void
     */
    public function setUndergroundUrl($undergroundUrl)
    {
        if ($this->undergroundUrl !== $undergroundUrl) {
            $this->undergroundUrl = $undergroundUrl;
        }
    }
    
    /**
     * Returns the underground meta.
     *
     * @return array
     */
    public function getUndergroundMeta()
    {
        return $this->undergroundMeta;
    }
    
    /**
     * Sets the underground meta.
     *
     * @param array $undergroundMeta
     *
     * @return void
     */
    public function setUndergroundMeta($undergroundMeta = [])
    {
        if ($this->undergroundMeta !== $undergroundMeta) {
            $this->undergroundMeta = $undergroundMeta;
        }
    }
    
    /**
     * Returns the score rev.
     *
     * @return integer
     */
    public function getScoreRev()
    {
        return $this->scoreRev;
    }
    
    /**
     * Sets the score rev.
     *
     * @param integer $scoreRev
     *
     * @return void
     */
    public function setScoreRev($scoreRev)
    {
        if (intval($this->scoreRev) !== intval($scoreRev)) {
            $this->scoreRev = intval($scoreRev);
        }
    }
    
    /**
     * Returns the n score rev.
     *
     * @return integer
     */
    public function getNScoreRev()
    {
        return $this->nScoreRev;
    }
    
    /**
     * Sets the n score rev.
     *
     * @param integer $nScoreRev
     *
     * @return void
     */
    public function setNScoreRev($nScoreRev)
    {
        if (intval($this->nScoreRev) !== intval($nScoreRev)) {
            $this->nScoreRev = intval($nScoreRev);
        }
    }
    
    /**
     * Returns the n downloads.
     *
     * @return integer
     */
    public function getNDownloads()
    {
        return $this->nDownloads;
    }
    
    /**
     * Sets the n downloads.
     *
     * @param integer $nDownloads
     *
     * @return void
     */
    public function setNDownloads($nDownloads)
    {
        if (intval($this->nDownloads) !== intval($nDownloads)) {
            $this->nDownloads = intval($nDownloads);
        }
    }
    
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'tdmmapsmodule.ui_hooks.maps';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Map ' . $this->getKey() . ': ' . $this->getName();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        // reset upload fields
        $this->setMapFile(null);
        $this->setMapFileMeta([]);
        $this->setMapFileUrl('');
        $this->setForeground(null);
        $this->setForegroundMeta([]);
        $this->setForegroundUrl('');
        $this->setUnderground(null);
        $this->setUndergroundMeta([]);
        $this->setUndergroundUrl('');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
