<?php
/**
 * Maps.
 *
 * @copyright Krator (TdM)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Krator <torredemarfil@heroesofmightandmagic.es>.
 * @link https://www.heroesofmightandmagic.es
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.2.0 (https://modulestudio.de).
 */

namespace TdM\MapsModule\Controller;

use TdM\MapsModule\Controller\Base\AbstractMapController;

use RuntimeException;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Zikula\ThemeModule\Engine\Annotation\Theme;
use TdM\MapsModule\Entity\MapEntity;

/**
 * Map controller class providing navigation and interaction functionality.
 */
class MapController extends AbstractMapController
{
    /**
     * @inheritDoc
     *
     * @Route("/admin/maps",
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function adminIndexAction(Request $request)
    {
        return parent::adminIndexAction($request);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/maps",
     *        methods = {"GET"}
     * )
     *
     * @param Request $request Current request instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function indexAction(Request $request)
    {
        //return parent::indexAction($request);
		$repository = $this->get('tdm_maps_module.entity_factory')->getRepository('map');
		$where = '';
		$sort = 'createdDate';
		$sortdir = 'DESC';
		$currentPage = '1';
		$resultsPerPage = '10';
		list($lastTen, $objectCount) = $repository->selectWherePaginated($where, $sort . ' ' . $sortdir, $currentPage, $resultsPerPage);
		// Top 10 Cartographer
		$topTenCar = $repository->getTopTen();
		
		// Top Downloads
		$sort = 'nDownloads';
		list($mostDown, $nmostDown) = $repository->selectWherePaginated($where, $sort . ' ' . $sortdir, $currentPage, $resultsPerPage);
		//Render Page
		return $this->render('TdMMapsModule:Custom:index.html.twig', [
            'lastTen' => $lastTen,
			'topTenCar' => $topTenCar,
			'mostDown' => $mostDown,
			'nmaps' => $objectCount
        ]);
    }
    /**
     * @inheritDoc
     *
     * @Route("/admin/maps/view/{sort}/{sortdir}/{pos}/{num}.{_format}",
     *        requirements = {"sortdir" = "asc|desc|ASC|DESC", "pos" = "\d+", "num" = "\d+", "_format" = "html"},
     *        defaults = {"sort" = "", "sortdir" = "asc", "pos" = 1, "num" = 10, "_format" = "html"},
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     * @param string $sort         Sorting field
     * @param string $sortdir      Sorting direction
     * @param int    $pos          Current pager position
     * @param int    $num          Amount of entries to display
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function adminViewAction(Request $request, $sort, $sortdir, $pos, $num)
    {
        return parent::adminViewAction($request, $sort, $sortdir, $pos, $num);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/maps/view/{sort}/{sortdir}/{pos}/{num}.{_format}",
     *        requirements = {"sortdir" = "asc|desc|ASC|DESC", "pos" = "\d+", "num" = "\d+", "_format" = "html"},
     *        defaults = {"sort" = "", "sortdir" = "asc", "pos" = 1, "num" = 10, "_format" = "html"},
     *        methods = {"GET"}
     * )
     *
     * @param Request $request Current request instance
     * @param string $sort         Sorting field
     * @param string $sortdir      Sorting direction
     * @param int    $pos          Current pager position
     * @param int    $num          Amount of entries to display
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function viewAction(Request $request, $sort, $sortdir, $pos, $num)
    {
        return parent::viewAction($request, $sort, $sortdir, $pos, $num);
    }
    /**
     * @inheritDoc
     *
     * @Route("/admin/map/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET"}
     * )
     * @ParamConverter("map", class="TdMMapsModule:MapEntity", options = {"repository_method" = "selectById", "mapping": {"id": "id"}, "map_method_signature" = true})
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     * @param MapEntity $map Treated map instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by param converter if map to be displayed isn't found
     */
    public function adminDisplayAction(Request $request, MapEntity $map)
    {
        return parent::adminDisplayAction($request, $map);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/map/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET"}
     * )
     * @ParamConverter("map", class="TdMMapsModule:MapEntity", options = {"repository_method" = "selectById", "mapping": {"id": "id"}, "map_method_signature" = true})
     *
     * @param Request $request Current request instance
     * @param MapEntity $map Treated map instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by param converter if map to be displayed isn't found
     */
    public function displayAction(Request $request, MapEntity $map)
    {
        //return parent::displayAction($request, $map);
		// parameter specifying which type of objects we are treating
        $objectType = 'map';
        $permLevel = ACCESS_READ;
        if (!$this->hasPermission('TdMMapsModule:' . ucfirst($objectType) . ':', '::', $permLevel)) {
            throw new AccessDeniedException();
        }
        // create identifier for permission check
        $instanceId = $map->getKey();
        if (!$this->hasPermission('TdMMapsModule:' . ucfirst($objectType) . ':', $instanceId . '::', $permLevel)) {
            throw new AccessDeniedException();
        }
        
        if ($map->getWorkflowState() != 'approved' && !$this->hasPermission('TdMMapsModule:' . ucfirst($objectType) . ':', $instanceId . '::', ACCESS_ADMIN)) {
            throw new AccessDeniedException();
        }

		//Score
		if ($map->getNScoreRev() == 0){
			$score = 0;
		}else{
			$score = round( $map->getScoreRev() / $map->getNScoreRev() );
		}

		$templateParameters = [
            'routeArea' => '',
            $objectType => $map
        ];
        
        $controllerHelper = $this->get('tdm_maps_module.controller_helper');
        $templateParameters = $controllerHelper->processDisplayActionParameters($objectType, $templateParameters, true);
//dump($templateParameters);die();
		//Render Page
		//$response = $this->get('tdm_maps_module.view_helper')->processTemplate($objectType, 'display', $templateParameters);
		return $this->render('TdMMapsModule:Custom:display.html.twig', [
            'map' => $map,
			'routeArea' => '',
			'score' => $score,
			'templateParameters' => $templateParameters
        ]);
    }
    /**
     * @inheritDoc
     *
     * @Route("/admin/map/edit/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"id" = "0", "_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by form handler if map to be edited isn't found
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available)
     */
    public function adminEditAction(Request $request)
    {
        return parent::adminEditAction($request);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/map/edit/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"id" = "0", "_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     *
     * @param Request $request Current request instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by form handler if map to be edited isn't found
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available)
     */
    public function editAction(Request $request)
    {
        return parent::editAction($request);
    }
    /**
     * @inheritDoc
     *
     * @Route("/admin/map/delete/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     * @ParamConverter("map", class="TdMMapsModule:MapEntity", options = {"repository_method" = "selectById", "mapping": {"id": "id"}, "map_method_signature" = true})
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     * @param MapEntity $map Treated map instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by param converter if map to be deleted isn't found
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available)
     */
    public function adminDeleteAction(Request $request, MapEntity $map)
    {
        return parent::adminDeleteAction($request, $map);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/map/delete/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     * @ParamConverter("map", class="TdMMapsModule:MapEntity", options = {"repository_method" = "selectById", "mapping": {"id": "id"}, "map_method_signature" = true})
     *
     * @param Request $request Current request instance
     * @param MapEntity $map Treated map instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by param converter if map to be deleted isn't found
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available)
     */
    public function deleteAction(Request $request, MapEntity $map)
    {
        return parent::deleteAction($request, $map);
    }

    /**
     * Process status changes for multiple items.
     *
     * This function processes the items selected in the admin view page.
     * Multiple items may have their state changed or be deleted.
     *
     * @Route("/admin/maps/handleSelectedEntries",
     *        methods = {"POST"}
     * )
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     *
     * @return RedirectResponse
     *
     * @throws RuntimeException Thrown if executing the workflow action fails
     */
    public function adminHandleSelectedEntriesAction(Request $request)
    {
        return parent::adminHandleSelectedEntriesAction($request);
    }
    
    /**
     * Process status changes for multiple items.
     *
     * This function processes the items selected in the admin view page.
     * Multiple items may have their state changed or be deleted.
     *
     * @Route("/maps/handleSelectedEntries",
     *        methods = {"POST"}
     * )
     *
     * @param Request $request Current request instance
     *
     * @return RedirectResponse
     *
     * @throws RuntimeException Thrown if executing the workflow action fails
     */
    public function handleSelectedEntriesAction(Request $request)
    {
        return parent::handleSelectedEntriesAction($request);
    }

    // feel free to add your own controller methods here
	
	
	/**
     * @inheritDoc
     *
     * @Route("/admin/map/score/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET"}
     * )
     * @ParamConverter("map", class="TdMMapsModule:MapEntity", options = {"repository_method" = "selectById", "mapping": {"id": "id"}, "map_method_signature" = true})
     *
     * @param Request $request Current request instance
     * @param MapEntity $map Treated map instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by param converter if map to be displayed isn't found
     */
	public function scoreAction(Request $request, MapEntity $map)
	{
		// parameter specifying which type of objects we are treating
        $objectType = 'map';
        $permLevel = ACCESS_ADMIN;
        if (!$this->hasPermission('TdMMapsModule:' . ucfirst($objectType) . ':', '::', $permLevel)) {
            throw new AccessDeniedException();
        }
        // create identifier for permission check
        $instanceId = $map->getKey();
        if (!$this->hasPermission('TdMMapsModule:' . ucfirst($objectType) . ':', $instanceId . '::', $permLevel)) {
            throw new AccessDeniedException();
        }
        
        if ($map->getWorkflowState() != 'approved' && !$this->hasPermission('TdMMapsModule:' . ucfirst($objectType) . ':', $instanceId . '::', ACCESS_ADMIN)) {
            throw new AccessDeniedException();
        }
        
        //Get form data
		$confirmation = $request->query->get('confirmation');
		$score = $request->query->get('Score');
		 
		// Check for confirmation.
		if (empty($confirmation)) {
			//Render Page
            return $this->render('TdMMapsModule:Custom:score.html.twig', [
				'mid' => $instanceId
			]);
		}
        //dump() sirve para ver una entidad
        // Confirm authorisation code
		/*if (!SecurityUtil::confirmAuthKey()) {
			return LogUtil::registerAuthidError (ModUtil::url('Maps', 'admin', 'view'));
		}*/
		
		// Scores
		$newScore = $map->getScoreRev() + $score;
		$map->setScoreRev($newScore);
		$newNScore = $map->getNScoreRev() + 1;
		$map->setNScoreRev($newNScore);

		//Get Entity Manager
		$em = $this->getDoctrine()->getManager();
		
		try {
			$em->persist($map);
            $em->flush();
			$this->addFlash('status', $this->__('Map scored sucessfully.'));
            return $this->redirectToRoute('tdmmapsmodule_map_adminindex');
		} catch (Zikula_Exception $e) {
            echo "<pre>";
            var_dump($e->getDebug());
            echo "</pre>";
            die;
        }
	}
}
