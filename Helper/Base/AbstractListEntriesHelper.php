<?php
/**
 * Maps.
 *
 * @copyright Krator (TdM)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Krator <torredemarfil@heroesofmightandmagic.es>.
 * @link https://www.heroesofmightandmagic.es
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.2.0 (https://modulestudio.de).
 */

namespace TdM\MapsModule\Helper\Base;

use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;

/**
 * Helper base class for list field entries related methods.
 */
abstract class AbstractListEntriesHelper
{
    use TranslatorTrait;

    /**
     * ListEntriesHelper constructor.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function __construct(TranslatorInterface $translator)
    {
        $this->setTranslator($translator);
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * Return the name or names for a given list item.
     *
     * @param string $value      The dropdown value to process
     * @param string $objectType The treated object type
     * @param string $fieldName  The list field's name
     * @param string $delimiter  String used as separator for multiple selections
     *
     * @return string List item name
     */
    public function resolve($value, $objectType = '', $fieldName = '', $delimiter = ', ')
    {
        if ((empty($value) && $value != '0') || empty($objectType) || empty($fieldName)) {
            return $value;
        }
    
        $isMulti = $this->hasMultipleSelection($objectType, $fieldName);
        if (true === $isMulti) {
            $value = $this->extractMultiList($value);
        }
    
        $options = $this->getEntries($objectType, $fieldName);
        $result = '';
    
        if (true === $isMulti) {
            foreach ($options as $option) {
                if (!in_array($option['value'], $value)) {
                    continue;
                }
                if (!empty($result)) {
                    $result .= $delimiter;
                }
                $result .= $option['text'];
            }
        } else {
            foreach ($options as $option) {
                if ($option['value'] != $value) {
                    continue;
                }
                $result = $option['text'];
                break;
            }
        }
    
        return $result;
    }
    

    /**
     * Extract concatenated multi selection.
     *
     * @param string  $value The dropdown value to process
     *
     * @return array List of single values
     */
    public function extractMultiList($value)
    {
        $listValues = explode('###', $value);
        $amountOfValues = count($listValues);
        if ($amountOfValues > 1 && $listValues[$amountOfValues - 1] == '') {
            unset($listValues[$amountOfValues - 1]);
        }
        if ($listValues[0] == '') {
            // use array_shift instead of unset for proper key reindexing
            // keys must start with 0, otherwise the dropdownlist form plugin gets confused
            array_shift($listValues);
        }
    
        return $listValues;
    }
    

    /**
     * Determine whether a certain dropdown field has a multi selection or not.
     *
     * @param string $objectType The treated object type
     * @param string $fieldName  The list field's name
     *
     * @return boolean True if this is a multi list false otherwise
     */
    public function hasMultipleSelection($objectType, $fieldName)
    {
        if (empty($objectType) || empty($fieldName)) {
            return false;
        }
    
        $result = false;
        switch ($objectType) {
            case 'map':
                switch ($fieldName) {
                    case 'workflowState':
                        $result = false;
                        break;
                    case 'testState':
                        $result = false;
                        break;
                    case 'game':
                        $result = false;
                        break;
                    case 'sizeMap':
                        $result = false;
                        break;
                    case 'languageMap':
                        $result = false;
                        break;
                    case 'difficulty':
                        $result = false;
                        break;
                    case 'gameType':
                        $result = false;
                        break;
                    case 'mapStyle':
                        $result = true;
                        break;
                }
                break;
            case 'appSettings':
                switch ($fieldName) {
                    case 'thumbnailModeMapForeground':
                        $result = false;
                        break;
                    case 'thumbnailModeMapUnderground':
                        $result = false;
                        break;
                    case 'enabledFinderTypes':
                        $result = true;
                        break;
                }
                break;
        }
    
        return $result;
    }
    

    /**
     * Get entries for a certain dropdown field.
     *
     * @param string  $objectType The treated object type
     * @param string  $fieldName  The list field's name
     *
     * @return array Array with desired list entries
     */
    public function getEntries($objectType, $fieldName)
    {
        if (empty($objectType) || empty($fieldName)) {
            return [];
        }
    
        $entries = [];
        switch ($objectType) {
            case 'map':
                switch ($fieldName) {
                    case 'workflowState':
                        $entries = $this->getWorkflowStateEntriesForMap();
                        break;
                    case 'testState':
                        $entries = $this->getTestStateEntriesForMap();
                        break;
                    case 'game':
                        $entries = $this->getGameEntriesForMap();
                        break;
                    case 'sizeMap':
                        $entries = $this->getSizeMapEntriesForMap();
                        break;
                    case 'languageMap':
                        $entries = $this->getLanguageMapEntriesForMap();
                        break;
                    case 'difficulty':
                        $entries = $this->getDifficultyEntriesForMap();
                        break;
                    case 'gameType':
                        $entries = $this->getGameTypeEntriesForMap();
                        break;
                    case 'mapStyle':
                        $entries = $this->getMapStyleEntriesForMap();
                        break;
                }
                break;
            case 'appSettings':
                switch ($fieldName) {
                    case 'thumbnailModeMapForeground':
                        $entries = $this->getThumbnailModeMapForegroundEntriesForAppSettings();
                        break;
                    case 'thumbnailModeMapUnderground':
                        $entries = $this->getThumbnailModeMapUndergroundEntriesForAppSettings();
                        break;
                    case 'enabledFinderTypes':
                        $entries = $this->getEnabledFinderTypesEntriesForAppSettings();
                        break;
                }
                break;
        }
    
        return $entries;
    }

    
    /**
     * Get 'workflow state' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getWorkflowStateEntriesForMap()
    {
        $states = [];
        $states[] = [
            'value'   => 'waiting',
            'text'    => $this->__('Waiting'),
            'title'   => $this->__('Content has been submitted and waits for approval.'),
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'approved',
            'text'    => $this->__('Approved'),
            'title'   => $this->__('Content has been approved and is available online.'),
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => '!waiting',
            'text'    => $this->__('All except waiting'),
            'title'   => $this->__('Shows all items except these which are waiting'),
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => '!approved',
            'text'    => $this->__('All except approved'),
            'title'   => $this->__('Shows all items except these which are approved'),
            'image'   => '',
            'default' => false
        ];
    
        return $states;
    }
    
    /**
     * Get 'test state' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getTestStateEntriesForMap()
    {
        $states = [];
        $states[] = [
            'value'   => 'WaitingApprovers',
            'text'    => $this->__('Waiting Approvers'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Testing',
            'text'    => $this->__('Testing'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Completed',
            'text'    => $this->__('Completed'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
    
        return $states;
    }
    
    /**
     * Get 'game' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getGameEntriesForMap()
    {
        $states = [];
        $states[] = [
            'value'   => 'H1',
            'text'    => $this->__('H1'),
            'title'   => '',
            'image'   => '',
            'default' => true
        ];
        $states[] = [
            'value'   => 'H2SW',
            'text'    => $this->__('H2 SW'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H2POL',
            'text'    => $this->__('H2 PoL'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H3ROE',
            'text'    => $this->__('H3 ROE'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H2AB',
            'text'    => $this->__('H3 AB'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H3SOD',
            'text'    => $this->__('H3 SOD'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H3WOG',
            'text'    => $this->__('H3 WOG'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H4STD',
            'text'    => $this->__('H4 Std'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H4GS',
            'text'    => $this->__('H4 GS'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H4WOW',
            'text'    => $this->__('H4 WoW'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H4EQ',
            'text'    => $this->__('H4 Eq'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H5STD',
            'text'    => $this->__('H5 Std'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H5HOF',
            'text'    => $this->__('H5 HoF'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H5TOE',
            'text'    => $this->__('H5 ToE'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H6STD',
            'text'    => $this->__('H6 Std'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'H7STD',
            'text'    => $this->__('H7 Std'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
    
        return $states;
    }
    
    /**
     * Get 'size map' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getSizeMapEntriesForMap()
    {
        $states = [];
        $states[] = [
            'value'   => 'Peque?o',
            'text'    => $this->__('Tiny'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Mediano',
            'text'    => $this->__('Medium'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Grande',
            'text'    => $this->__('Big'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Extragrande',
            'text'    => $this->__('Huge'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Campa?a',
            'text'    => $this->__('Campaign'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
    
        return $states;
    }
    
    /**
     * Get 'language map' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getLanguageMapEntriesForMap()
    {
        $states = [];
        $states[] = [
            'value'   => 'Ingl?s',
            'text'    => $this->__('English'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Espa?ol',
            'text'    => $this->__('Spanish'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Otro',
            'text'    => $this->__('Otro'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
    
        return $states;
    }
    
    /**
     * Get 'difficulty' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getDifficultyEntriesForMap()
    {
        $states = [];
        $states[] = [
            'value'   => 'Easy',
            'text'    => $this->__('Easy'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Normal',
            'text'    => $this->__('Normal'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Hard',
            'text'    => $this->__('Hard'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Expert',
            'text'    => $this->__('Expert'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Impossible',
            'text'    => $this->__('Impossible'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
    
        return $states;
    }
    
    /**
     * Get 'game type' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getGameTypeEntriesForMap()
    {
        $states = [];
        $states[] = [
            'value'   => 'Single',
            'text'    => $this->__('Single'),
            'title'   => '',
            'image'   => '',
            'default' => true
        ];
        $states[] = [
            'value'   => 'Duel',
            'text'    => $this->__('Duel'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'HumanVsCPU',
            'text'    => $this->__('Humans allied vs CPU'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'AlliedvsAllied',
            'text'    => $this->__('Allied vs Allied'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'MultiplayerSingle',
            'text'    => $this->__('Multiplayer single'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'MultiplayerTeams',
            'text'    => $this->__('Multiplayer for teams'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'MultiplayerAllVsCPU',
            'text'    => $this->__('Multiplayer allied vs CPU'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
    
        return $states;
    }
    
    /**
     * Get 'map style' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getMapStyleEntriesForMap()
    {
        $states = [];
        $states[] = [
            'value'   => 'Classic',
            'text'    => $this->__('Classic'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Big armies',
            'text'    => $this->__('Big armies'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'With little resources',
            'text'    => $this->__('With little resources'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'With many castles',
            'text'    => $this->__('With many castles'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'History',
            'text'    => $this->__('History'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Small armies',
            'text'    => $this->__('Small armies'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'With many resources',
            'text'    => $this->__('With many resources'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'With many forts',
            'text'    => $this->__('With many forts'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Exploration',
            'text'    => $this->__('Exploration'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Quick Init',
            'text'    => $this->__('Quick Init'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Balanced for multiplayer',
            'text'    => $this->__('Balanced for multiplayer'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Without control areas',
            'text'    => $this->__('Without control areas'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Quest',
            'text'    => $this->__('Quest'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Time limit',
            'text'    => $this->__('Time limit'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Campaign',
            'text'    => $this->__('Campaign'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Might neutrals',
            'text'    => $this->__('Might neutrals'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Tournament',
            'text'    => $this->__('Tournament'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Borders',
            'text'    => $this->__('Borders'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
        $states[] = [
            'value'   => 'Navegation',
            'text'    => $this->__('Navegation'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
    
        return $states;
    }
    
    /**
     * Get 'thumbnail mode map foreground' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getThumbnailModeMapForegroundEntriesForAppSettings()
    {
        $states = [];
        $states[] = [
            'value'   => 'inset',
            'text'    => $this->__('Inset'),
            'title'   => '',
            'image'   => '',
            'default' => true
        ];
        $states[] = [
            'value'   => 'outbound',
            'text'    => $this->__('Outbound'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
    
        return $states;
    }
    
    /**
     * Get 'thumbnail mode map underground' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getThumbnailModeMapUndergroundEntriesForAppSettings()
    {
        $states = [];
        $states[] = [
            'value'   => 'inset',
            'text'    => $this->__('Inset'),
            'title'   => '',
            'image'   => '',
            'default' => true
        ];
        $states[] = [
            'value'   => 'outbound',
            'text'    => $this->__('Outbound'),
            'title'   => '',
            'image'   => '',
            'default' => false
        ];
    
        return $states;
    }
    
    /**
     * Get 'enabled finder types' list entries.
     *
     * @return array Array with desired list entries
     */
    public function getEnabledFinderTypesEntriesForAppSettings()
    {
        $states = [];
        $states[] = [
            'value'   => 'map',
            'text'    => $this->__('Map'),
            'title'   => '',
            'image'   => '',
            'default' => true
        ];
    
        return $states;
    }
}
