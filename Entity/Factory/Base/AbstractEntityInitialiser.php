<?php
/**
 * Maps.
 *
 * @copyright Krator (TdM)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Krator <torredemarfil@heroesofmightandmagic.es>.
 * @link https://www.heroesofmightandmagic.es
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.2.0 (https://modulestudio.de).
 */

namespace TdM\MapsModule\Entity\Factory\Base;

use TdM\MapsModule\Entity\MapEntity;
use TdM\MapsModule\Helper\ListEntriesHelper;

/**
 * Entity initialiser class used to dynamically apply default values to newly created entities.
 */
abstract class AbstractEntityInitialiser
{
    /**
     * @var ListEntriesHelper Helper service for managing list entries
     */
    protected $listEntriesHelper;

    /**
     * EntityInitialiser constructor.
     *
     * @param ListEntriesHelper $listEntriesHelper Helper service for managing list entries
     */
    public function __construct(ListEntriesHelper $listEntriesHelper)
    {
        $this->listEntriesHelper = $listEntriesHelper;
    }

    /**
     * Initialises a given map instance.
     *
     * @param MapEntity $entity The newly created entity instance
     *
     * @return MapEntity The updated entity instance
     */
    public function initMap(MapEntity $entity)
    {
        $listEntries = $this->listEntriesHelper->getEntries('map', 'testState');
        foreach ($listEntries as $listEntry) {
            if (true === $listEntry['default']) {
                $entity->setTestState($listEntry['value']);
                break;
            }
        }

        $listEntries = $this->listEntriesHelper->getEntries('map', 'game');
        foreach ($listEntries as $listEntry) {
            if (true === $listEntry['default']) {
                $entity->setGame($listEntry['value']);
                break;
            }
        }

        $listEntries = $this->listEntriesHelper->getEntries('map', 'sizeMap');
        foreach ($listEntries as $listEntry) {
            if (true === $listEntry['default']) {
                $entity->setSizeMap($listEntry['value']);
                break;
            }
        }

        $listEntries = $this->listEntriesHelper->getEntries('map', 'languageMap');
        foreach ($listEntries as $listEntry) {
            if (true === $listEntry['default']) {
                $entity->setLanguageMap($listEntry['value']);
                break;
            }
        }

        $listEntries = $this->listEntriesHelper->getEntries('map', 'difficulty');
        foreach ($listEntries as $listEntry) {
            if (true === $listEntry['default']) {
                $entity->setDifficulty($listEntry['value']);
                break;
            }
        }

        $listEntries = $this->listEntriesHelper->getEntries('map', 'gameType');
        foreach ($listEntries as $listEntry) {
            if (true === $listEntry['default']) {
                $entity->setGameType($listEntry['value']);
                break;
            }
        }

        $listEntries = $this->listEntriesHelper->getEntries('map', 'mapStyle');
        $items = [];
        foreach ($listEntries as $listEntry) {
            if (true === $listEntry['default']) {
                $items[] = $listEntry['value'];
            }
        }
        $entity->setMapStyle(implode('###', $items));


        return $entity;
    }

    /**
     * Returns the list entries helper.
     *
     * @return ListEntriesHelper
     */
    public function getListEntriesHelper()
    {
        return $this->listEntriesHelper;
    }
    
    /**
     * Sets the list entries helper.
     *
     * @param ListEntriesHelper $listEntriesHelper
     *
     * @return void
     */
    public function setListEntriesHelper($listEntriesHelper)
    {
        if ($this->listEntriesHelper != $listEntriesHelper) {
            $this->listEntriesHelper = $listEntriesHelper;
        }
    }
    
}
