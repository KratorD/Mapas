<?php
/**
 * Maps.
 *
 * @copyright Krator (TdM)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Krator <torredemarfil@heroesofmightandmagic.es>.
 * @link https://www.heroesofmightandmagic.es
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.2.0 (https://modulestudio.de).
 */

namespace TdM\MapsModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\GroupsModule\Constant as GroupsConstant;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;
use TdM\MapsModule\Validator\Constraints as MapsAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @var GroupRepositoryInterface
     */
    protected $groupRepository;
    
    /**
     * Used to determine moderator user accounts for sending email notifications.
     *
     * @Assert\NotBlank()
     * @var integer $moderationGroupForMaps
     */
    protected $moderationGroupForMaps = 2;
    
    /**
     * The amount of maps shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $mapEntriesPerPage
     */
    protected $mapEntriesPerPage = 10;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForMapForeground
     */
    protected $enableShrinkingForMapForeground = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthMapForeground
     */
    protected $shrinkWidthMapForeground = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightMapForeground
     */
    protected $shrinkHeightMapForeground = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @MapsAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeMapForeground", multiple=false)
     * @var string $thumbnailModeMapForeground
     */
    protected $thumbnailModeMapForeground = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMapForegroundView
     */
    protected $thumbnailWidthMapForegroundView = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMapForegroundView
     */
    protected $thumbnailHeightMapForegroundView = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMapForegroundDisplay
     */
    protected $thumbnailWidthMapForegroundDisplay = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMapForegroundDisplay
     */
    protected $thumbnailHeightMapForegroundDisplay = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMapForegroundEdit
     */
    protected $thumbnailWidthMapForegroundEdit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMapForegroundEdit
     */
    protected $thumbnailHeightMapForegroundEdit = 180;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForMapUnderground
     */
    protected $enableShrinkingForMapUnderground = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthMapUnderground
     */
    protected $shrinkWidthMapUnderground = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightMapUnderground
     */
    protected $shrinkHeightMapUnderground = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @MapsAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeMapUnderground", multiple=false)
     * @var string $thumbnailModeMapUnderground
     */
    protected $thumbnailModeMapUnderground = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMapUndergroundView
     */
    protected $thumbnailWidthMapUndergroundView = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMapUndergroundView
     */
    protected $thumbnailHeightMapUndergroundView = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMapUndergroundDisplay
     */
    protected $thumbnailWidthMapUndergroundDisplay = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMapUndergroundDisplay
     */
    protected $thumbnailHeightMapUndergroundDisplay = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMapUndergroundEdit
     */
    protected $thumbnailWidthMapUndergroundEdit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMapUndergroundEdit
     */
    protected $thumbnailHeightMapUndergroundEdit = 180;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull()
     * @MapsAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     * @var string $enabledFinderTypes
     */
    protected $enabledFinderTypes = 'map';
    
    
    /**
     * AppSettings constructor.
     *
     * @param VariableApiInterface $variableApi VariableApi service instance
     * @param GroupRepositoryInterface $groupRepository GroupRepository service instance
     */
    public function __construct(
        VariableApiInterface $variableApi,
        GroupRepositoryInterface $groupRepository
    ) {
        $this->variableApi = $variableApi;
        $this->groupRepository = $groupRepository;
    
        $this->load();
    }
    
    /**
     * Returns the moderation group for maps.
     *
     * @return integer
     */
    public function getModerationGroupForMaps()
    {
        return $this->moderationGroupForMaps;
    }
    
    /**
     * Sets the moderation group for maps.
     *
     * @param integer $moderationGroupForMaps
     *
     * @return void
     */
    public function setModerationGroupForMaps($moderationGroupForMaps)
    {
        if ($this->moderationGroupForMaps !== $moderationGroupForMaps) {
            $this->moderationGroupForMaps = $moderationGroupForMaps;
        }
    }
    
    /**
     * Returns the map entries per page.
     *
     * @return integer
     */
    public function getMapEntriesPerPage()
    {
        return $this->mapEntriesPerPage;
    }
    
    /**
     * Sets the map entries per page.
     *
     * @param integer $mapEntriesPerPage
     *
     * @return void
     */
    public function setMapEntriesPerPage($mapEntriesPerPage)
    {
        if (intval($this->mapEntriesPerPage) !== intval($mapEntriesPerPage)) {
            $this->mapEntriesPerPage = intval($mapEntriesPerPage);
        }
    }
    
    /**
     * Returns the enable shrinking for map foreground.
     *
     * @return boolean
     */
    public function getEnableShrinkingForMapForeground()
    {
        return $this->enableShrinkingForMapForeground;
    }
    
    /**
     * Sets the enable shrinking for map foreground.
     *
     * @param boolean $enableShrinkingForMapForeground
     *
     * @return void
     */
    public function setEnableShrinkingForMapForeground($enableShrinkingForMapForeground)
    {
        if (boolval($this->enableShrinkingForMapForeground) !== boolval($enableShrinkingForMapForeground)) {
            $this->enableShrinkingForMapForeground = boolval($enableShrinkingForMapForeground);
        }
    }
    
    /**
     * Returns the shrink width map foreground.
     *
     * @return integer
     */
    public function getShrinkWidthMapForeground()
    {
        return $this->shrinkWidthMapForeground;
    }
    
    /**
     * Sets the shrink width map foreground.
     *
     * @param integer $shrinkWidthMapForeground
     *
     * @return void
     */
    public function setShrinkWidthMapForeground($shrinkWidthMapForeground)
    {
        if (intval($this->shrinkWidthMapForeground) !== intval($shrinkWidthMapForeground)) {
            $this->shrinkWidthMapForeground = intval($shrinkWidthMapForeground);
        }
    }
    
    /**
     * Returns the shrink height map foreground.
     *
     * @return integer
     */
    public function getShrinkHeightMapForeground()
    {
        return $this->shrinkHeightMapForeground;
    }
    
    /**
     * Sets the shrink height map foreground.
     *
     * @param integer $shrinkHeightMapForeground
     *
     * @return void
     */
    public function setShrinkHeightMapForeground($shrinkHeightMapForeground)
    {
        if (intval($this->shrinkHeightMapForeground) !== intval($shrinkHeightMapForeground)) {
            $this->shrinkHeightMapForeground = intval($shrinkHeightMapForeground);
        }
    }
    
    /**
     * Returns the thumbnail mode map foreground.
     *
     * @return string
     */
    public function getThumbnailModeMapForeground()
    {
        return $this->thumbnailModeMapForeground;
    }
    
    /**
     * Sets the thumbnail mode map foreground.
     *
     * @param string $thumbnailModeMapForeground
     *
     * @return void
     */
    public function setThumbnailModeMapForeground($thumbnailModeMapForeground)
    {
        if ($this->thumbnailModeMapForeground !== $thumbnailModeMapForeground) {
            $this->thumbnailModeMapForeground = isset($thumbnailModeMapForeground) ? $thumbnailModeMapForeground : '';
        }
    }
    
    /**
     * Returns the thumbnail width map foreground view.
     *
     * @return integer
     */
    public function getThumbnailWidthMapForegroundView()
    {
        return $this->thumbnailWidthMapForegroundView;
    }
    
    /**
     * Sets the thumbnail width map foreground view.
     *
     * @param integer $thumbnailWidthMapForegroundView
     *
     * @return void
     */
    public function setThumbnailWidthMapForegroundView($thumbnailWidthMapForegroundView)
    {
        if (intval($this->thumbnailWidthMapForegroundView) !== intval($thumbnailWidthMapForegroundView)) {
            $this->thumbnailWidthMapForegroundView = intval($thumbnailWidthMapForegroundView);
        }
    }
    
    /**
     * Returns the thumbnail height map foreground view.
     *
     * @return integer
     */
    public function getThumbnailHeightMapForegroundView()
    {
        return $this->thumbnailHeightMapForegroundView;
    }
    
    /**
     * Sets the thumbnail height map foreground view.
     *
     * @param integer $thumbnailHeightMapForegroundView
     *
     * @return void
     */
    public function setThumbnailHeightMapForegroundView($thumbnailHeightMapForegroundView)
    {
        if (intval($this->thumbnailHeightMapForegroundView) !== intval($thumbnailHeightMapForegroundView)) {
            $this->thumbnailHeightMapForegroundView = intval($thumbnailHeightMapForegroundView);
        }
    }
    
    /**
     * Returns the thumbnail width map foreground display.
     *
     * @return integer
     */
    public function getThumbnailWidthMapForegroundDisplay()
    {
        return $this->thumbnailWidthMapForegroundDisplay;
    }
    
    /**
     * Sets the thumbnail width map foreground display.
     *
     * @param integer $thumbnailWidthMapForegroundDisplay
     *
     * @return void
     */
    public function setThumbnailWidthMapForegroundDisplay($thumbnailWidthMapForegroundDisplay)
    {
        if (intval($this->thumbnailWidthMapForegroundDisplay) !== intval($thumbnailWidthMapForegroundDisplay)) {
            $this->thumbnailWidthMapForegroundDisplay = intval($thumbnailWidthMapForegroundDisplay);
        }
    }
    
    /**
     * Returns the thumbnail height map foreground display.
     *
     * @return integer
     */
    public function getThumbnailHeightMapForegroundDisplay()
    {
        return $this->thumbnailHeightMapForegroundDisplay;
    }
    
    /**
     * Sets the thumbnail height map foreground display.
     *
     * @param integer $thumbnailHeightMapForegroundDisplay
     *
     * @return void
     */
    public function setThumbnailHeightMapForegroundDisplay($thumbnailHeightMapForegroundDisplay)
    {
        if (intval($this->thumbnailHeightMapForegroundDisplay) !== intval($thumbnailHeightMapForegroundDisplay)) {
            $this->thumbnailHeightMapForegroundDisplay = intval($thumbnailHeightMapForegroundDisplay);
        }
    }
    
    /**
     * Returns the thumbnail width map foreground edit.
     *
     * @return integer
     */
    public function getThumbnailWidthMapForegroundEdit()
    {
        return $this->thumbnailWidthMapForegroundEdit;
    }
    
    /**
     * Sets the thumbnail width map foreground edit.
     *
     * @param integer $thumbnailWidthMapForegroundEdit
     *
     * @return void
     */
    public function setThumbnailWidthMapForegroundEdit($thumbnailWidthMapForegroundEdit)
    {
        if (intval($this->thumbnailWidthMapForegroundEdit) !== intval($thumbnailWidthMapForegroundEdit)) {
            $this->thumbnailWidthMapForegroundEdit = intval($thumbnailWidthMapForegroundEdit);
        }
    }
    
    /**
     * Returns the thumbnail height map foreground edit.
     *
     * @return integer
     */
    public function getThumbnailHeightMapForegroundEdit()
    {
        return $this->thumbnailHeightMapForegroundEdit;
    }
    
    /**
     * Sets the thumbnail height map foreground edit.
     *
     * @param integer $thumbnailHeightMapForegroundEdit
     *
     * @return void
     */
    public function setThumbnailHeightMapForegroundEdit($thumbnailHeightMapForegroundEdit)
    {
        if (intval($this->thumbnailHeightMapForegroundEdit) !== intval($thumbnailHeightMapForegroundEdit)) {
            $this->thumbnailHeightMapForegroundEdit = intval($thumbnailHeightMapForegroundEdit);
        }
    }
    
    /**
     * Returns the enable shrinking for map underground.
     *
     * @return boolean
     */
    public function getEnableShrinkingForMapUnderground()
    {
        return $this->enableShrinkingForMapUnderground;
    }
    
    /**
     * Sets the enable shrinking for map underground.
     *
     * @param boolean $enableShrinkingForMapUnderground
     *
     * @return void
     */
    public function setEnableShrinkingForMapUnderground($enableShrinkingForMapUnderground)
    {
        if (boolval($this->enableShrinkingForMapUnderground) !== boolval($enableShrinkingForMapUnderground)) {
            $this->enableShrinkingForMapUnderground = boolval($enableShrinkingForMapUnderground);
        }
    }
    
    /**
     * Returns the shrink width map underground.
     *
     * @return integer
     */
    public function getShrinkWidthMapUnderground()
    {
        return $this->shrinkWidthMapUnderground;
    }
    
    /**
     * Sets the shrink width map underground.
     *
     * @param integer $shrinkWidthMapUnderground
     *
     * @return void
     */
    public function setShrinkWidthMapUnderground($shrinkWidthMapUnderground)
    {
        if (intval($this->shrinkWidthMapUnderground) !== intval($shrinkWidthMapUnderground)) {
            $this->shrinkWidthMapUnderground = intval($shrinkWidthMapUnderground);
        }
    }
    
    /**
     * Returns the shrink height map underground.
     *
     * @return integer
     */
    public function getShrinkHeightMapUnderground()
    {
        return $this->shrinkHeightMapUnderground;
    }
    
    /**
     * Sets the shrink height map underground.
     *
     * @param integer $shrinkHeightMapUnderground
     *
     * @return void
     */
    public function setShrinkHeightMapUnderground($shrinkHeightMapUnderground)
    {
        if (intval($this->shrinkHeightMapUnderground) !== intval($shrinkHeightMapUnderground)) {
            $this->shrinkHeightMapUnderground = intval($shrinkHeightMapUnderground);
        }
    }
    
    /**
     * Returns the thumbnail mode map underground.
     *
     * @return string
     */
    public function getThumbnailModeMapUnderground()
    {
        return $this->thumbnailModeMapUnderground;
    }
    
    /**
     * Sets the thumbnail mode map underground.
     *
     * @param string $thumbnailModeMapUnderground
     *
     * @return void
     */
    public function setThumbnailModeMapUnderground($thumbnailModeMapUnderground)
    {
        if ($this->thumbnailModeMapUnderground !== $thumbnailModeMapUnderground) {
            $this->thumbnailModeMapUnderground = isset($thumbnailModeMapUnderground) ? $thumbnailModeMapUnderground : '';
        }
    }
    
    /**
     * Returns the thumbnail width map underground view.
     *
     * @return integer
     */
    public function getThumbnailWidthMapUndergroundView()
    {
        return $this->thumbnailWidthMapUndergroundView;
    }
    
    /**
     * Sets the thumbnail width map underground view.
     *
     * @param integer $thumbnailWidthMapUndergroundView
     *
     * @return void
     */
    public function setThumbnailWidthMapUndergroundView($thumbnailWidthMapUndergroundView)
    {
        if (intval($this->thumbnailWidthMapUndergroundView) !== intval($thumbnailWidthMapUndergroundView)) {
            $this->thumbnailWidthMapUndergroundView = intval($thumbnailWidthMapUndergroundView);
        }
    }
    
    /**
     * Returns the thumbnail height map underground view.
     *
     * @return integer
     */
    public function getThumbnailHeightMapUndergroundView()
    {
        return $this->thumbnailHeightMapUndergroundView;
    }
    
    /**
     * Sets the thumbnail height map underground view.
     *
     * @param integer $thumbnailHeightMapUndergroundView
     *
     * @return void
     */
    public function setThumbnailHeightMapUndergroundView($thumbnailHeightMapUndergroundView)
    {
        if (intval($this->thumbnailHeightMapUndergroundView) !== intval($thumbnailHeightMapUndergroundView)) {
            $this->thumbnailHeightMapUndergroundView = intval($thumbnailHeightMapUndergroundView);
        }
    }
    
    /**
     * Returns the thumbnail width map underground display.
     *
     * @return integer
     */
    public function getThumbnailWidthMapUndergroundDisplay()
    {
        return $this->thumbnailWidthMapUndergroundDisplay;
    }
    
    /**
     * Sets the thumbnail width map underground display.
     *
     * @param integer $thumbnailWidthMapUndergroundDisplay
     *
     * @return void
     */
    public function setThumbnailWidthMapUndergroundDisplay($thumbnailWidthMapUndergroundDisplay)
    {
        if (intval($this->thumbnailWidthMapUndergroundDisplay) !== intval($thumbnailWidthMapUndergroundDisplay)) {
            $this->thumbnailWidthMapUndergroundDisplay = intval($thumbnailWidthMapUndergroundDisplay);
        }
    }
    
    /**
     * Returns the thumbnail height map underground display.
     *
     * @return integer
     */
    public function getThumbnailHeightMapUndergroundDisplay()
    {
        return $this->thumbnailHeightMapUndergroundDisplay;
    }
    
    /**
     * Sets the thumbnail height map underground display.
     *
     * @param integer $thumbnailHeightMapUndergroundDisplay
     *
     * @return void
     */
    public function setThumbnailHeightMapUndergroundDisplay($thumbnailHeightMapUndergroundDisplay)
    {
        if (intval($this->thumbnailHeightMapUndergroundDisplay) !== intval($thumbnailHeightMapUndergroundDisplay)) {
            $this->thumbnailHeightMapUndergroundDisplay = intval($thumbnailHeightMapUndergroundDisplay);
        }
    }
    
    /**
     * Returns the thumbnail width map underground edit.
     *
     * @return integer
     */
    public function getThumbnailWidthMapUndergroundEdit()
    {
        return $this->thumbnailWidthMapUndergroundEdit;
    }
    
    /**
     * Sets the thumbnail width map underground edit.
     *
     * @param integer $thumbnailWidthMapUndergroundEdit
     *
     * @return void
     */
    public function setThumbnailWidthMapUndergroundEdit($thumbnailWidthMapUndergroundEdit)
    {
        if (intval($this->thumbnailWidthMapUndergroundEdit) !== intval($thumbnailWidthMapUndergroundEdit)) {
            $this->thumbnailWidthMapUndergroundEdit = intval($thumbnailWidthMapUndergroundEdit);
        }
    }
    
    /**
     * Returns the thumbnail height map underground edit.
     *
     * @return integer
     */
    public function getThumbnailHeightMapUndergroundEdit()
    {
        return $this->thumbnailHeightMapUndergroundEdit;
    }
    
    /**
     * Sets the thumbnail height map underground edit.
     *
     * @param integer $thumbnailHeightMapUndergroundEdit
     *
     * @return void
     */
    public function setThumbnailHeightMapUndergroundEdit($thumbnailHeightMapUndergroundEdit)
    {
        if (intval($this->thumbnailHeightMapUndergroundEdit) !== intval($thumbnailHeightMapUndergroundEdit)) {
            $this->thumbnailHeightMapUndergroundEdit = intval($thumbnailHeightMapUndergroundEdit);
        }
    }
    
    /**
     * Returns the enabled finder types.
     *
     * @return string
     */
    public function getEnabledFinderTypes()
    {
        return $this->enabledFinderTypes;
    }
    
    /**
     * Sets the enabled finder types.
     *
     * @param string $enabledFinderTypes
     *
     * @return void
     */
    public function setEnabledFinderTypes($enabledFinderTypes)
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = isset($enabledFinderTypes) ? $enabledFinderTypes : '';
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('TdMMapsModule');
    
        if (isset($moduleVars['moderationGroupForMaps'])) {
            $this->setModerationGroupForMaps($moduleVars['moderationGroupForMaps']);
        }
        if (isset($moduleVars['mapEntriesPerPage'])) {
            $this->setMapEntriesPerPage($moduleVars['mapEntriesPerPage']);
        }
        if (isset($moduleVars['enableShrinkingForMapForeground'])) {
            $this->setEnableShrinkingForMapForeground($moduleVars['enableShrinkingForMapForeground']);
        }
        if (isset($moduleVars['shrinkWidthMapForeground'])) {
            $this->setShrinkWidthMapForeground($moduleVars['shrinkWidthMapForeground']);
        }
        if (isset($moduleVars['shrinkHeightMapForeground'])) {
            $this->setShrinkHeightMapForeground($moduleVars['shrinkHeightMapForeground']);
        }
        if (isset($moduleVars['thumbnailModeMapForeground'])) {
            $this->setThumbnailModeMapForeground($moduleVars['thumbnailModeMapForeground']);
        }
        if (isset($moduleVars['thumbnailWidthMapForegroundView'])) {
            $this->setThumbnailWidthMapForegroundView($moduleVars['thumbnailWidthMapForegroundView']);
        }
        if (isset($moduleVars['thumbnailHeightMapForegroundView'])) {
            $this->setThumbnailHeightMapForegroundView($moduleVars['thumbnailHeightMapForegroundView']);
        }
        if (isset($moduleVars['thumbnailWidthMapForegroundDisplay'])) {
            $this->setThumbnailWidthMapForegroundDisplay($moduleVars['thumbnailWidthMapForegroundDisplay']);
        }
        if (isset($moduleVars['thumbnailHeightMapForegroundDisplay'])) {
            $this->setThumbnailHeightMapForegroundDisplay($moduleVars['thumbnailHeightMapForegroundDisplay']);
        }
        if (isset($moduleVars['thumbnailWidthMapForegroundEdit'])) {
            $this->setThumbnailWidthMapForegroundEdit($moduleVars['thumbnailWidthMapForegroundEdit']);
        }
        if (isset($moduleVars['thumbnailHeightMapForegroundEdit'])) {
            $this->setThumbnailHeightMapForegroundEdit($moduleVars['thumbnailHeightMapForegroundEdit']);
        }
        if (isset($moduleVars['enableShrinkingForMapUnderground'])) {
            $this->setEnableShrinkingForMapUnderground($moduleVars['enableShrinkingForMapUnderground']);
        }
        if (isset($moduleVars['shrinkWidthMapUnderground'])) {
            $this->setShrinkWidthMapUnderground($moduleVars['shrinkWidthMapUnderground']);
        }
        if (isset($moduleVars['shrinkHeightMapUnderground'])) {
            $this->setShrinkHeightMapUnderground($moduleVars['shrinkHeightMapUnderground']);
        }
        if (isset($moduleVars['thumbnailModeMapUnderground'])) {
            $this->setThumbnailModeMapUnderground($moduleVars['thumbnailModeMapUnderground']);
        }
        if (isset($moduleVars['thumbnailWidthMapUndergroundView'])) {
            $this->setThumbnailWidthMapUndergroundView($moduleVars['thumbnailWidthMapUndergroundView']);
        }
        if (isset($moduleVars['thumbnailHeightMapUndergroundView'])) {
            $this->setThumbnailHeightMapUndergroundView($moduleVars['thumbnailHeightMapUndergroundView']);
        }
        if (isset($moduleVars['thumbnailWidthMapUndergroundDisplay'])) {
            $this->setThumbnailWidthMapUndergroundDisplay($moduleVars['thumbnailWidthMapUndergroundDisplay']);
        }
        if (isset($moduleVars['thumbnailHeightMapUndergroundDisplay'])) {
            $this->setThumbnailHeightMapUndergroundDisplay($moduleVars['thumbnailHeightMapUndergroundDisplay']);
        }
        if (isset($moduleVars['thumbnailWidthMapUndergroundEdit'])) {
            $this->setThumbnailWidthMapUndergroundEdit($moduleVars['thumbnailWidthMapUndergroundEdit']);
        }
        if (isset($moduleVars['thumbnailHeightMapUndergroundEdit'])) {
            $this->setThumbnailHeightMapUndergroundEdit($moduleVars['thumbnailHeightMapUndergroundEdit']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    
        // prepare group selectors, fallback to admin group for undefined values
        $adminGroupId = GroupsConstant::GROUP_ID_ADMIN;
        $groupId = $this->getModerationGroupForMaps();
        if ($groupId < 1) {
            $groupId = $adminGroupId;
        }
    
        $this->setModerationGroupForMaps($this->groupRepository->find($groupId));
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        // normalise group selector values
        $group = $this->getModerationGroupForMaps();
        $group = is_object($group) ? $group->getGid() : intval($group);
        $this->setModerationGroupForMaps($group);
    
        $this->variableApi->set('TdMMapsModule', 'moderationGroupForMaps', $this->getModerationGroupForMaps());
        $this->variableApi->set('TdMMapsModule', 'mapEntriesPerPage', $this->getMapEntriesPerPage());
        $this->variableApi->set('TdMMapsModule', 'enableShrinkingForMapForeground', $this->getEnableShrinkingForMapForeground());
        $this->variableApi->set('TdMMapsModule', 'shrinkWidthMapForeground', $this->getShrinkWidthMapForeground());
        $this->variableApi->set('TdMMapsModule', 'shrinkHeightMapForeground', $this->getShrinkHeightMapForeground());
        $this->variableApi->set('TdMMapsModule', 'thumbnailModeMapForeground', $this->getThumbnailModeMapForeground());
        $this->variableApi->set('TdMMapsModule', 'thumbnailWidthMapForegroundView', $this->getThumbnailWidthMapForegroundView());
        $this->variableApi->set('TdMMapsModule', 'thumbnailHeightMapForegroundView', $this->getThumbnailHeightMapForegroundView());
        $this->variableApi->set('TdMMapsModule', 'thumbnailWidthMapForegroundDisplay', $this->getThumbnailWidthMapForegroundDisplay());
        $this->variableApi->set('TdMMapsModule', 'thumbnailHeightMapForegroundDisplay', $this->getThumbnailHeightMapForegroundDisplay());
        $this->variableApi->set('TdMMapsModule', 'thumbnailWidthMapForegroundEdit', $this->getThumbnailWidthMapForegroundEdit());
        $this->variableApi->set('TdMMapsModule', 'thumbnailHeightMapForegroundEdit', $this->getThumbnailHeightMapForegroundEdit());
        $this->variableApi->set('TdMMapsModule', 'enableShrinkingForMapUnderground', $this->getEnableShrinkingForMapUnderground());
        $this->variableApi->set('TdMMapsModule', 'shrinkWidthMapUnderground', $this->getShrinkWidthMapUnderground());
        $this->variableApi->set('TdMMapsModule', 'shrinkHeightMapUnderground', $this->getShrinkHeightMapUnderground());
        $this->variableApi->set('TdMMapsModule', 'thumbnailModeMapUnderground', $this->getThumbnailModeMapUnderground());
        $this->variableApi->set('TdMMapsModule', 'thumbnailWidthMapUndergroundView', $this->getThumbnailWidthMapUndergroundView());
        $this->variableApi->set('TdMMapsModule', 'thumbnailHeightMapUndergroundView', $this->getThumbnailHeightMapUndergroundView());
        $this->variableApi->set('TdMMapsModule', 'thumbnailWidthMapUndergroundDisplay', $this->getThumbnailWidthMapUndergroundDisplay());
        $this->variableApi->set('TdMMapsModule', 'thumbnailHeightMapUndergroundDisplay', $this->getThumbnailHeightMapUndergroundDisplay());
        $this->variableApi->set('TdMMapsModule', 'thumbnailWidthMapUndergroundEdit', $this->getThumbnailWidthMapUndergroundEdit());
        $this->variableApi->set('TdMMapsModule', 'thumbnailHeightMapUndergroundEdit', $this->getThumbnailHeightMapUndergroundEdit());
        $this->variableApi->set('TdMMapsModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
