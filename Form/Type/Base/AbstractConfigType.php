<?php
/**
 * Maps.
 *
 * @copyright Krator (TdM)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Krator <torredemarfil@heroesofmightandmagic.es>.
 * @link https://www.heroesofmightandmagic.es
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.2.0 (https://modulestudio.de).
 */

namespace TdM\MapsModule\Form\Type\Base;

use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\ResetType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use TdM\MapsModule\Form\Type\Field\MultiListType;
use TdM\MapsModule\AppSettings;
use TdM\MapsModule\Helper\ListEntriesHelper;

/**
 * Configuration form type base class.
 */
abstract class AbstractConfigType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var ListEntriesHelper
     */
    protected $listHelper;

    /**
     * ConfigType constructor.
     *
     * @param TranslatorInterface $translator Translator service instance
     * @param ListEntriesHelper $listHelper ListEntriesHelper service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        ListEntriesHelper $listHelper
    ) {
        $this->setTranslator($translator);
        $this->listHelper = $listHelper;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addModerationFields($builder, $options);
        $this->addListViewsFields($builder, $options);
        $this->addImagesFields($builder, $options);
        $this->addIntegrationFields($builder, $options);

        $this->addSubmitButtons($builder, $options);
    }

    /**
     * Adds fields for moderation fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addModerationFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('moderationGroupForMaps', EntityType::class, [
            'label' => $this->__('Moderation group for maps') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Used to determine moderator user accounts for sending email notifications.')
            ],
            'help' => $this->__('Used to determine moderator user accounts for sending email notifications.'),
            'empty_data' => '2',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Choose the moderation group for maps')
            ],
            'required' => true,
            // Zikula core should provide a form type for this to hide entity details
            'class' => 'ZikulaGroupsModule:GroupEntity',
            'choice_label' => 'name',
            'choice_value' => 'gid'
        ]);
    }

    /**
     * Adds fields for list views fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('mapEntriesPerPage', IntegerType::class, [
            'label' => $this->__('Map entries per page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The amount of maps shown per page')
            ],
            'help' => $this->__('The amount of maps shown per page'),
            'empty_data' => '10',
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the map entries per page.') . ' ' . $this->__('Only digits are allowed.')
            ],
            'required' => true,
            'scale' => 0
        ]);
    }

    /**
     * Adds fields for images fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addImagesFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('enableShrinkingForMapForeground', CheckboxType::class, [
            'label' => $this->__('Enable shrinking for map foreground') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.')
            ],
            'help' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.'),
            'attr' => [
                'class' => 'shrink-enabler',
                'title' => $this->__('The enable shrinking option')
            ],
            'required' => false,
        ]);
        
        $builder->add('shrinkWidthMapForeground', IntegerType::class, [
            'label' => $this->__('Shrink width map foreground') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image width in pixels.')
            ],
            'help' => $this->__('The maximum image width in pixels.'),
            'empty_data' => '800',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink width')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('shrinkHeightMapForeground', IntegerType::class, [
            'label' => $this->__('Shrink height map foreground') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image height in pixels.')
            ],
            'help' => $this->__('The maximum image height in pixels.'),
            'empty_data' => '600',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink height')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'thumbnailModeMapForeground');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('thumbnailModeMapForeground', ChoiceType::class, [
            'label' => $this->__('Thumbnail mode map foreground') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail mode (inset or outbound).')
            ],
            'help' => $this->__('Thumbnail mode (inset or outbound).'),
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the thumbnail mode.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('thumbnailWidthMapForegroundView', IntegerType::class, [
            'label' => $this->__('Thumbnail width map foreground view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on view pages in pixels.'),
            'empty_data' => '32',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightMapForegroundView', IntegerType::class, [
            'label' => $this->__('Thumbnail height map foreground view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on view pages in pixels.'),
            'empty_data' => '24',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthMapForegroundDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail width map foreground display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on display pages in pixels.'),
            'empty_data' => '240',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightMapForegroundDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail height map foreground display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on display pages in pixels.'),
            'empty_data' => '180',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthMapForegroundEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail width map foreground edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on edit pages in pixels.'),
            'empty_data' => '240',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightMapForegroundEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail height map foreground edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on edit pages in pixels.'),
            'empty_data' => '180',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('enableShrinkingForMapUnderground', CheckboxType::class, [
            'label' => $this->__('Enable shrinking for map underground') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.')
            ],
            'help' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.'),
            'attr' => [
                'class' => 'shrink-enabler',
                'title' => $this->__('The enable shrinking option')
            ],
            'required' => false,
        ]);
        
        $builder->add('shrinkWidthMapUnderground', IntegerType::class, [
            'label' => $this->__('Shrink width map underground') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image width in pixels.')
            ],
            'help' => $this->__('The maximum image width in pixels.'),
            'empty_data' => '800',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink width')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('shrinkHeightMapUnderground', IntegerType::class, [
            'label' => $this->__('Shrink height map underground') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image height in pixels.')
            ],
            'help' => $this->__('The maximum image height in pixels.'),
            'empty_data' => '600',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink height')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'thumbnailModeMapUnderground');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('thumbnailModeMapUnderground', ChoiceType::class, [
            'label' => $this->__('Thumbnail mode map underground') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail mode (inset or outbound).')
            ],
            'help' => $this->__('Thumbnail mode (inset or outbound).'),
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the thumbnail mode.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('thumbnailWidthMapUndergroundView', IntegerType::class, [
            'label' => $this->__('Thumbnail width map underground view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on view pages in pixels.'),
            'empty_data' => '32',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightMapUndergroundView', IntegerType::class, [
            'label' => $this->__('Thumbnail height map underground view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on view pages in pixels.'),
            'empty_data' => '24',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthMapUndergroundDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail width map underground display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on display pages in pixels.'),
            'empty_data' => '240',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightMapUndergroundDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail height map underground display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on display pages in pixels.'),
            'empty_data' => '180',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthMapUndergroundEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail width map underground edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on edit pages in pixels.'),
            'empty_data' => '240',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightMapUndergroundEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail height map underground edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on edit pages in pixels.'),
            'empty_data' => '180',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
    }

    /**
     * Adds fields for integration fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addIntegrationFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'enabledFinderTypes');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('enabledFinderTypes', MultiListType::class, [
            'label' => $this->__('Enabled finder types') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).')
            ],
            'help' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).'),
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the enabled finder types.')
            ],
            'required' => false,
            'placeholder' => $this->__('Choose an option'),
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => true,
            'expanded' => false
        ]);
    }

    /**
     * Adds submit buttons.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addSubmitButtons(FormBuilderInterface $builder, array $options = [])
    {
        $builder->add('save', SubmitType::class, [
            'label' => $this->__('Update configuration'),
            'icon' => 'fa-check',
            'attr' => [
                'class' => 'btn btn-success'
            ]
        ]);
        $builder->add('reset', ResetType::class, [
            'label' => $this->__('Reset'),
            'icon' => 'fa-refresh',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
        $builder->add('cancel', SubmitType::class, [
            'label' => $this->__('Cancel'),
            'icon' => 'fa-times',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'tdmmapsmodule_config';
    }

    /**
     * @inheritDoc
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                // define class for underlying data
                'data_class' => AppSettings::class,
            ]);
    }
}
